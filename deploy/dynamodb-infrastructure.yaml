AWSTemplateFormatVersion: '2010-09-09'
Description: 'DynamoDB Table and IAM Roles for LoungeAccessAdvisor User Profiles'

Parameters:
  Environment:
    Type: String
    Description: Environment name (dev, staging, prod)
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
  
  TableName:
    Type: String
    Description: Name of the DynamoDB table
    Default: UserProfile

Resources:
  # DynamoDB Table for User Profiles
  UserProfileTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${TableName}-${Environment}'
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: LoungeAccessAdvisor
        - Key: Component
          Value: UserProfile

  # IAM Policy for DynamoDB Access
  DynamoDBAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub 'LoungeAccessAdvisor-DynamoDB-${Environment}'
      Description: Policy for LoungeAccessAdvisor DynamoDB access
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:DescribeTable
              - dynamodb:CreateTable
              - dynamodb:UpdateTable
              - dynamodb:DeleteTable
              - dynamodb:ListTables
            Resource:
              - !GetAtt UserProfileTable.Arn
              - !Sub '${UserProfileTable.Arn}/index/*'
              - !Sub '${UserProfileTable.Arn}/stream/*'
          - Effect: Allow
            Action:
              - dynamodb:ListTables
              - dynamodb:DescribeTable
            Resource: '*'

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'LoungeAccessAdvisor-Lambda-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref DynamoDBAccessPolicy
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: LoungeAccessAdvisor

  # EC2 Instance Role
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'LoungeAccessAdvisor-EC2-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - !Ref DynamoDBAccessPolicy
      Policies:
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                  - bedrock:ListFoundationModels
                  - bedrock:GetFoundationModel
                Resource:
                  - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-*'
                  - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/us.anthropic.claude-*'
        - PolicyName: AgentCoreAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock-agentcore:*
                Resource: '*'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: LoungeAccessAdvisor

  # Instance Profile for EC2
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub 'LoungeAccessAdvisor-EC2-Profile-${Environment}'
      Roles:
        - !Ref EC2InstanceRole

Outputs:
  UserProfileTableName:
    Description: Name of the DynamoDB UserProfile table
    Value: !Ref UserProfileTable
    Export:
      Name: !Sub '${AWS::StackName}-UserProfileTable'

  UserProfileTableArn:
    Description: ARN of the DynamoDB UserProfile table
    Value: !GetAtt UserProfileTable.Arn
    Export:
      Name: !Sub '${AWS::StackName}-UserProfileTableArn'

  LambdaExecutionRoleArn:
    Description: ARN of the Lambda execution role
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaRole'

  EC2InstanceRoleArn:
    Description: ARN of the EC2 instance role
    Value: !GetAtt EC2InstanceRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-EC2Role'

  EC2InstanceProfileArn:
    Description: ARN of the EC2 instance profile
    Value: !GetAtt EC2InstanceProfile.Arn
    Export:
      Name: !Sub '${AWS::StackName}-EC2Profile'

  DynamoDBAccessPolicyArn:
    Description: ARN of the DynamoDB access policy
    Value: !Ref DynamoDBAccessPolicy
    Export:
      Name: !Sub '${AWS::StackName}-DynamoDBPolicy'